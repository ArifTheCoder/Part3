{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Person","props","react_default","a","createElement","name","phone","App_DeletePerson","id","DeletePerson","onClick","window","confirm","axios","delete","concat","then","response","console","log","location","reload","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addPerson","event","preventDefault","state","persons","filter","p","newName","length","alert","newPerson","number","newNumber","post","setState","data","handlePersonName","target","value","handlePhoneNumber","_this2","get","onSubmit","onChange","type","map","person","App_Person","key","React","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b99ec8b.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nconst baseUrl = '/persons'\n\n//Person component\nconst Person = (props) => {\n  return(\n    <tbody>\n      <tr>\n        <td>{props.name}</td>\n        <td>{props.phone}</td>\n        <td><DeletePerson id={props.id} /></td>\n      </tr>\n    </tbody>\n  )\n}\n\n//DetetePerson component\nconst DeletePerson = (props) => {\n\n  //Delete data from database\n  const deletePerson = () =>{\n    if (window.confirm(\"Do you really want to delete?\")) { \n      axios\n      .delete(`http://localhost:3001/persons/${props.id}`)\n      .then(response => {\n        console.log('Deleted');\n      })\n      window.location.reload();\n    }\n  }\n  return(\n    <button onClick={deletePerson}>poista</button>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [\n        { name: '', number:'' }\n      ],\n      newName: '',\n      newNumber: ''\n    }\n\n  }\n\n  //react life-cycle method\n  componentDidMount() {\n    axios\n      .get(baseUrl)\n      .then(response => {\n        this.setState({ persons: response.data })\n      })\n  }\n\n  //addPerson method\n  addPerson = (event) => {\n    event.preventDefault();\n    \n    //check if the person already exists\n    const findMatch = this.state.persons.filter(p => p.name === this.state.newName)\n    if(findMatch.length > 0) {\n      alert('Person already exists!');\n    } else {\n      const newPerson = {\n        name: this.state.newName,\n        number: this.state.newNumber\n      };\n\n      axios\n      .post('http://localhost:3001/persons', newPerson)\n      .then(response => {\n        this.setState({\n          persons: this.state.persons.concat(response.data),\n          newName: '',\n          newNumber: ''\n        })\n      })\n\n      \n    }\n  }\n\n  //handlePersonName merhod\n  handlePersonName = (event) => {\n    this.setState({newName:event.target.value});\n  }\n\n  //handlePhoneNumber\n  handlePhoneNumber = (event) => {\n    this.setState({newNumber:event.target.value});\n  }\n\n  \n\n  render() {\n    return (\n      <div>\n        <h2>Puhelinluettelo</h2>\n        <form onSubmit={this.addPerson}>\n          <div>\n            nimi: <input value={this.state.newName} onChange={this.handlePersonName} />\n            <br />\n            numero: <input value={this.state.newNumber} onChange={this.handlePhoneNumber} />\n          </div>\n          <div>\n            <button type=\"submit\">lisää</button>\n          </div>\n        </form>\n        <h2>Numerot</h2>\n        <div>\n          <table>\n          {this.state.persons.map(person => <Person key={person.name} name={person.name} phone={person.number} id={person.id} />)}\n         \n          </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}